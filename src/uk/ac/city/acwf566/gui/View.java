/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.ac.city.acwf566.gui;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JSlider;
import uk.ac.city.acwf566.handler.PhysicsHandler;
import uk.ac.city.acwf566.math.ExponentArithmetic;
import uk.ac.city.acwf566.objects.Body;

/**
 *
 * @author Sam
 */
public class View extends javax.swing.JFrame {

    /**
     * Creates new form View
     */
    public View(PhysicsPanel physicsPanel) {
        this.physicsPanel = physicsPanel;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        //physicsPanel = new javax.swing.JPanel();
        bodyInformationPanel = new javax.swing.JPanel();
        nameBox = new javax.swing.JLabel();
        massIdentifierDisplay = new javax.swing.JLabel();
        radiusIdentifierDisplay = new javax.swing.JLabel();
        densityIdentifierDisplay = new javax.swing.JLabel();
        orbitSpeedIdentifierDisplay = new javax.swing.JLabel();
        surfaceGravityIdentifierDisplay = new javax.swing.JLabel();
        pauseButton = new javax.swing.JToggleButton();
        timescaleSlider = new javax.swing.JSlider();
        timescaleDisplay = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        lockCameraButton = new javax.swing.JButton();
        timescaleTextPanel = new javax.swing.JTextField();
        massBox = new javax.swing.JTextField();
        radiusBox = new javax.swing.JTextField();
        densityBox = new javax.swing.JTextField();
        orbSpeedBox = new javax.swing.JTextField();
        surfaceSpeedBox = new javax.swing.JTextField();
        densityLock = new javax.swing.JCheckBox();
        massLock = new javax.swing.JCheckBox();
        radiusLock = new javax.swing.JCheckBox();
        leftButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        ms2 = new javax.swing.JLabel();
        spawnBodyPanel = new javax.swing.JPanel();
        createBodyButton = new javax.swing.JButton();
        bodyTabbedPane = new javax.swing.JTabbedPane();
        customDropDown = new javax.swing.JComboBox<>();
        defaultDropDown = new javax.swing.JComboBox<>();
        Image scaledSunImage;
        try{
            BufferedImage sunImage = ImageIO.read(new File("data/images/bodies/default/Sun.png"));
            bodyImageLabel = new javax.swing.JLabel();
            scaledSunImage = sunImage.getScaledInstance(94, 94, sunImage.SCALE_FAST);
            bodyImageLabel.setIcon(new ImageIcon(scaledSunImage));
        }catch(IOException | NullPointerException e){
        }

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Planetary Physics Simulation");
        setName("frame"); // NOI18N

        physicsPanel.setBackground(new java.awt.Color(15, 15, 30));
        physicsPanel.setName("physicsPanel"); // NOI18N

        javax.swing.GroupLayout physicsPanelLayout = new javax.swing.GroupLayout(physicsPanel);
        physicsPanel.setLayout(physicsPanelLayout);
        physicsPanelLayout.setHorizontalGroup(
            physicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 911, Short.MAX_VALUE)
        );
        physicsPanelLayout.setVerticalGroup(
            physicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
        );

        bodyInformationPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bodyInformationPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nameBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bodyInformationPanel.add(nameBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 90, 30));

        massIdentifierDisplay.setText("Mass (kg):");
        bodyInformationPanel.add(massIdentifierDisplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        radiusIdentifierDisplay.setText("Radius (m):");
        bodyInformationPanel.add(radiusIdentifierDisplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        densityIdentifierDisplay.setText("Density (kg/m3):");
        bodyInformationPanel.add(densityIdentifierDisplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 100, 20));

        orbitSpeedIdentifierDisplay.setText("Speed (m/s)");
        bodyInformationPanel.add(orbitSpeedIdentifierDisplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 80, -1));

        surfaceGravityIdentifierDisplay.setText("Surface Gravity:");
        bodyInformationPanel.add(surfaceGravityIdentifierDisplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        pauseButton.setText("Pause");
        pauseButton.addActionListener(new java.awt.event.ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt){
                pauseButtonActionPerformed(evt);
            }
        });
        bodyInformationPanel.add(pauseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, -1, -1));
        
        lockCameraButton.setText("lock");
        lockCameraButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockCameraButtonActionPerformed();
            }
        });
        bodyInformationPanel.add(lockCameraButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 65, 30));
        
        timescaleSlider.setMaximum(7);
        timescaleSlider.setValue(7);
        timescaleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                timescaleSliderStateChanged(evt);
            }
        });
        bodyInformationPanel.add(timescaleSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 400, 179, -1));

        timescaleDisplay.setText("Timescale");
        bodyInformationPanel.add(timescaleDisplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 380, -1, -1));

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        bodyInformationPanel.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, -1, -1));

        timescaleTextPanel.setEditable(false);
        bodyInformationPanel.add(timescaleTextPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 420, 100, -1));
        timescaleTextPanel.setText("x"+Math.pow(2, timescaleSlider.getValue()));

        massBox.setEnabled(false);
        bodyInformationPanel.add(massBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 110, -1));

        radiusBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radiusBoxActionPerformed(evt);
            }
        });
        massBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                massBoxActionPerformed(evt);
            }
        });
        densityBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                densityBoxActionPerformed(evt);
            }
        });
        bodyInformationPanel.add(radiusBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 110, -1));
        bodyInformationPanel.add(densityBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 110, -1));

        orbSpeedBox.setEditable(false);
        bodyInformationPanel.add(orbSpeedBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 110, -1));

        surfaceSpeedBox.setEditable(false);
        bodyInformationPanel.add(surfaceSpeedBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, 110, -1));

        densityLock.setText("ðŸ”“");
        densityLock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                densityLockActionPerformed(evt);
            }
        });
        bodyInformationPanel.add(densityLock, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, -1, -1));

        massLock.setSelected(true);
        massLock.setText("ðŸ”’");
        massLock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                massLockActionPerformed(evt);
                
            }
        });
        bodyInformationPanel.add(massLock, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 50, -1, -1));

        radiusLock.setText("ðŸ”“");
        radiusLock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radiusLockActionPerformed(evt);
            }
        });
        bodyInformationPanel.add(radiusLock, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, -1, -1));

        leftButton.setText("<");
        leftButton.addActionListener(new java.awt.event.ActionListener(){
            public void actionPerformed(java.awt.event.ActionEvent evt){
                leftButtonActionPerformed();
            }
        });
        bodyInformationPanel.add(leftButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, -1, -1));

        rightButton.setText(">");
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed();
                
            }
        });
        
        bodyInformationPanel.add(rightButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, -1, -1));

        ms2.setText("(m/s2)");
        bodyInformationPanel.add(ms2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, -1, -1));

        spawnBodyPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        createBodyButton.setText("Create");

        bodyTabbedPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bodyTabbedPane.setName(""); // NOI18N

        customDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Star", "Planet", "Moon", "Asteroid" }));
        customDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customDropDownActionPerformed(evt);
            }
        });
        bodyTabbedPane.addTab("Custom", customDropDown);

        defaultDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sun", "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Pluto", "Moon" }));
        defaultDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultDropDownActionPerformed(evt);
            }
        });
        bodyTabbedPane.addTab("Default", defaultDropDown);

        bodyTabbedPane.setSelectedComponent(defaultDropDown);

        javax.swing.GroupLayout spawnBodyPanelLayout = new javax.swing.GroupLayout(spawnBodyPanel);
        spawnBodyPanel.setLayout(spawnBodyPanelLayout);
        spawnBodyPanelLayout.setHorizontalGroup(
            spawnBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spawnBodyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(spawnBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createBodyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bodyImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bodyTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addContainerGap())
        );
        spawnBodyPanelLayout.setVerticalGroup(
            spawnBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spawnBodyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(spawnBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(spawnBodyPanelLayout.createSequentialGroup()
                        .addComponent(bodyTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 20, Short.MAX_VALUE))
                    .addComponent(bodyImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createBodyButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(physicsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spawnBodyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bodyInformationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bodyInformationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spawnBodyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(physicsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void customDropDownActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void defaultDropDownActionPerformed(java.awt.event.ActionEvent evt) {                                                

        try{
            BufferedImage bodyImage = ImageIO.read(new File("data/images/bodies/default/"+defaultDropDown.getSelectedItem().toString()+".png"));
            Image scaledBodyImage = bodyImage.getScaledInstance(bodyImageLabel.getSize().width, bodyImageLabel.getSize().height, bodyImage.SCALE_FAST);
            bodyImageLabel.setIcon(new ImageIcon(scaledBodyImage));
        }catch(IOException e){
            e.printStackTrace();
        }
        
    }                                               

    private void timescaleSliderStateChanged(javax.swing.event.ChangeEvent evt) {                                             
        timescaleTextPanel.setText("x"+Math.pow(2, timescaleSlider.getValue()));
        timer.setDelay((int)(Math.pow(2,timescaleSlider.getMaximum())/Math.pow(2, timescaleSlider.getValue())));
    }                                            
    
    public void rightButtonActionPerformed(){
        boolean found = false;
        //System.out.println(bodyFocus);
        for(int i = 0; i < world.getBodies().size(); i++){
            //System.out.println("loop: "+world.getBodies().get(i));
            if(bodyFocus.toString().equals(world.getBodies().get(i).getId()) && found == false){
                found = true;
                if(i == world.getBodies().size()-1){
                    setBodyFocus(world.getBodies().get(0));
                    physicsPanel.setBodyFocus(world.getBodies().get(0));
                    updateInfoBox(bodyFocus);
                }else{
                    setBodyFocus(world.getBodies().get(i+1));
                    physicsPanel.setBodyFocus(world.getBodies().get(i+1));
                    updateInfoBox(bodyFocus);
                }
            }
        }
    }
    private void leftButtonActionPerformed(){
        boolean found = false;
        for(int i = 0; i < world.getBodies().size(); i++){
            if(bodyFocus.toString().equals(world.getBodies().get(i).getId()) && found == false){
                found = true;
                if(i == 0){
                    setBodyFocus(world.getBodies().get(world.getBodies().size()-1));
                    physicsPanel.setBodyFocus(world.getBodies().get(world.getBodies().size()-1));
                    updateInfoBox(bodyFocus);
                }else{
                    setBodyFocus(world.getBodies().get(i-1));
                    physicsPanel.setBodyFocus(world.getBodies().get(i-1));
                    updateInfoBox(bodyFocus);
                }
            }
        }
    }
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void nameBoxActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void massLockActionPerformed(java.awt.event.ActionEvent evt) {                                         
        massLock.setSelected(true);
        if(massLock.isSelected()){
            setLockedText(massLock);
            massBox.setEnabled(false);
            
            densityLock.setSelected(false);
            densityBox.setEnabled(true);
            setUnlockedText(densityLock);
            
            radiusLock.setSelected(false);
            radiusBox.setEnabled(true);
            setUnlockedText(radiusLock);
        }else{
            massBox.setEnabled(true);
            setUnlockedText(massLock);
        }
    }                                        

    private void radiusLockActionPerformed(java.awt.event.ActionEvent evt) {                                           
        radiusLock.setSelected(true);
        if(radiusLock.isSelected()){
            setLockedText(radiusLock);
            radiusBox.setEnabled(false);
            
            densityLock.setSelected(false);
            densityBox.setEnabled(true);
            setUnlockedText(densityLock);
            
            massLock.setSelected(false);
            massBox.setEnabled(true);
            setUnlockedText(massLock);
        }else{
            radiusBox.setEnabled(true);
            setUnlockedText(radiusLock);
        }
    }                                          

    private void densityLockActionPerformed(java.awt.event.ActionEvent evt) {                                            
        densityLock.setSelected(true);
        if(densityLock.isSelected()){
            setLockedText(densityLock);
            densityBox.setEnabled(false);
            
            massLock.setSelected(false);
            massBox.setEnabled(true);
            setUnlockedText(massLock);
            
            radiusLock.setSelected(false);
            radiusBox.setEnabled(true);
            setUnlockedText(radiusLock);
        }else{
            densityBox.setEnabled(true);
            setUnlockedText(densityLock);
        }
    }                                           
    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt){
        
    }
    private void radiusBoxActionPerformed(java.awt.event.ActionEvent evt) {     
        updateProperties("radius");
        updateInfoBox(bodyFocus);
    }      
    private void massBoxActionPerformed(java.awt.event.ActionEvent evt) {                                          
        updateProperties("mass");
        updateInfoBox(bodyFocus);
    } 
    private void densityBoxActionPerformed(java.awt.event.ActionEvent evt) {                                          
        updateProperties("density");
        updateInfoBox(bodyFocus);
    } 
    private void updateProperties(String changed){
        if(!radiusBox.isEnabled()){
            bodyFocus.updatePhysicalProperties("radius",changed, massBox.getText(), densityBox.getText());
        }else if(!massBox.isEnabled()){
            bodyFocus.updatePhysicalProperties("mass",changed, radiusBox.getText(), densityBox.getText());
        }else{
            bodyFocus.updatePhysicalProperties("density",changed, massBox.getText(), radiusBox.getText());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
    }
    private void setLockedText(javax.swing.JCheckBox checkBox){
        checkBox.setText("ðŸ”’");
    }
    private void setUnlockedText(javax.swing.JCheckBox checkBox){
        checkBox.setText("ðŸ”“");
    }
    public PhysicsPanel getPhysicsPanel(){
        return physicsPanel;
    }
    public void setPhysicsPanel(PhysicsPanel physicsPanel){
        this.physicsPanel = physicsPanel;
    }
    public void lockCameraButtonActionPerformed() {                                                 
        if(lockCameraButton.getText().equals("lock")){
            lockCameraButton.setText("unlock");
            lockCameraButton.setBackground(backgroundDisabledButtonColor);
            physicsPanel.setBodyFocus(bodyFocus);
            physicsPanel.setFocus(true);
        }else{
            lockCameraButton.setText("lock");
            lockCameraButton.setBackground(backgroundEnabledButtonColor);
            physicsPanel.setFocus(false);
        }
    }   
    public void updateInfoBoxSpeed(Body body){
        orbSpeedBox.setText(ExponentArithmetic.convertForDisplay(ExponentArithmetic.normalise(body.toSiPixel(body.getVelocity().getMagnitude()).split("E")[0], body.toSiPixel(body.getVelocity().getMagnitude()).split("E")[1]),3));
    }
    
    public void updateInfoBox(Body body){
        nameBox.setText(body.getName());
        massBox.setText(ExponentArithmetic.convertForDisplay(body.getMass(), 3));
        radiusBox.setText(ExponentArithmetic.convertForDisplay(body.getRadius(), 3));
        densityBox.setText(Float.toString(body.getDensity()));
        surfaceSpeedBox.setText(ExponentArithmetic.convertForDisplay(body.calculateSurfaceGravity(), 3));
    }
    
    public void setWorld(PhysicsHandler world) {
        this.world = world;
    }
    public float getTimescaleValue(){
        return (float)Math.pow(2, timescaleSlider.getValue());
    }
    public void setTimer(javax.swing.Timer timer){
        this.timer = timer;
    }

    public Body getBodyFocus() {
        return bodyFocus;
    }

    public void setBodyFocus(Body bodyFocus) {
        this.bodyFocus = bodyFocus;
    }

    public javax.swing.JButton getLockCameraButton() {
        return lockCameraButton;
    }

    public JSlider getTimescaleSlider() {
        return timescaleSlider;
    }
    
    private PhysicsHandler world;
    private javax.swing.Timer timer;
    private Body bodyFocus;
    private Color backgroundEnabledButtonColor = new Color(187,187,187);
    private Color backgroundDisabledButtonColor = new Color(150,150,150);
    // Variables declaration - do not modify                     
    private javax.swing.JLabel bodyImageLabel;
    private javax.swing.JPanel bodyInformationPanel;
    private javax.swing.JTabbedPane bodyTabbedPane;
    private javax.swing.JButton createBodyButton;
    private javax.swing.JComboBox<String> customDropDown;
    private javax.swing.JComboBox<String> defaultDropDown;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField densityBox;
    private javax.swing.JLabel densityIdentifierDisplay;
    private javax.swing.JCheckBox densityLock;
    private javax.swing.JButton leftButton;
    private javax.swing.JButton lockCameraButton;
    private javax.swing.JTextField massBox;
    private javax.swing.JLabel massIdentifierDisplay;
    private javax.swing.JCheckBox massLock;
    private javax.swing.JLabel ms2;
    private javax.swing.JLabel nameBox;
    private javax.swing.JTextField orbSpeedBox;
    private javax.swing.JLabel orbitSpeedIdentifierDisplay;
    private javax.swing.JToggleButton pauseButton;
    private PhysicsPanel physicsPanel;
    private javax.swing.JTextField radiusBox;
    private javax.swing.JLabel radiusIdentifierDisplay;
    private javax.swing.JCheckBox radiusLock;
    private javax.swing.JButton rightButton;
    private javax.swing.JPanel spawnBodyPanel;
    private javax.swing.JLabel surfaceGravityIdentifierDisplay;
    private javax.swing.JTextField surfaceSpeedBox;
    private javax.swing.JLabel timescaleDisplay;
    private javax.swing.JSlider timescaleSlider;
    private javax.swing.JTextField timescaleTextPanel;
    // End of variables declaration                   
}
